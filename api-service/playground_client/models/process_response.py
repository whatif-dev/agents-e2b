# coding: utf-8

"""
    playground

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictBool, StrictStr
from playground_client.models.out_stderr_response import OutStderrResponse
from playground_client.models.out_stdout_response import OutStdoutResponse

class ProcessResponse(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    stderr: List[OutStderrResponse] = ...
    stdout: List[OutStdoutResponse] = ...
    process_id: StrictStr = Field(..., alias="processID")
    finished: StrictBool = ...
    __properties = ["stderr", "stdout", "processID", "finished"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProcessResponse:
        """Create an instance of ProcessResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in stderr (list)
        _items = []
        if self.stderr:
            _items.extend(_item.to_dict() for _item in self.stderr if _item)
            _dict['stderr'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in stdout (list)
        _items = []
        if self.stdout:
            _items.extend(_item.to_dict() for _item in self.stdout if _item)
            _dict['stdout'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProcessResponse:
        """Create an instance of ProcessResponse from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ProcessResponse.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj:
            if _key not in cls.__properties:
                raise ValueError(
                    f"Error due to additional fields (not defined in ProcessResponse) in the input: {obj}"
                )

        return ProcessResponse.parse_obj(
            {
                "stderr": [
                    OutStderrResponse.from_dict(_item)
                    for _item in obj.get("stderr")
                ]
                if obj.get("stderr") is not None
                else None,
                "stdout": [
                    OutStdoutResponse.from_dict(_item)
                    for _item in obj.get("stdout")
                ]
                if obj.get("stdout") is not None
                else None,
                "process_id": obj.get("processID"),
                "finished": obj.get("finished"),
            }
        )

